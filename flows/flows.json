[{"id":"f6f2187d.f17ca8","type":"tab","label":"ThreejsDashboard","disabled":false,"info":""},{"id":"d68145ff.eb2ca8","type":"http in","z":"f6f2187d.f17ca8","name":"","url":"/access","method":"get","upload":false,"swaggerDoc":"","x":170,"y":540,"wires":[["7a0e8f8d.240fe8"]]},{"id":"7cb9e020.8fa27","type":"http response","z":"f6f2187d.f17ca8","name":"","statusCode":"","headers":{},"x":970,"y":580,"wires":[]},{"id":"7a0e8f8d.240fe8","type":"template","z":"f6f2187d.f17ca8","name":"threejs","field":"payload.script","fieldType":"msg","format":"javascript","syntax":"plain","template":"//THREE = global.get('three')\n\n\t\tfunction main() {\n\t\t  //const slider = document.getElementsByClassName(\"md-thumb-container\");\n          const canvas = document.querySelector('#c');\n          const renderer = new THREE.WebGLRenderer({canvas});\n        \n          const fov = 60;\n          const aspect = 2;  // the canvas default\n          const near = 0.1;\n          const far = 200;\n          const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n          camera.position.z = 30;\n        \n          const scene = new THREE.Scene();\n          scene.background = new THREE.Color('white');\n        \n          // put the camera on a pole (parent it to an object)\n          // so we can spin the pole to move the camera around the scene\n          const cameraPole = new THREE.Object3D();\n          scene.add(cameraPole);\n          cameraPole.add(camera);\n        \n          {\n            const color = 0xFFFFFF;\n            const intensity = 1;\n            const light = new THREE.DirectionalLight(color, intensity);\n            light.position.set(-1, 2, 4);\n            camera.add(light);\n          }\n        \n          const boxWidth = 1;\n          const boxHeight = 1;\n          const boxDepth = 1;\n          const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\n        \n          function rand(min, max) {\n            if (max === undefined) {\n              max = min;\n              min = 0;\n            }\n            return min + (max - min) * Math.random();\n          }\n        \n          function randomColor() {\n            return `hsl(${rand(360) | 0}, ${rand(50, 100) | 0}%, 50%)`;\n          }\n        \n          const numObjects = 100;\n          for (let i = 0; i < numObjects; ++i) {\n            const material = new THREE.MeshPhongMaterial({\n              color: randomColor(),\n            });\n        \n            const cube = new THREE.Mesh(geometry, material);\n            scene.add(cube);\n        \n            cube.position.set(rand(-20, 20), rand(-20, 20), rand(-20, 20));\n            cube.rotation.set(rand(Math.PI), rand(Math.PI), 0);\n            cube.scale.set(rand(3, 6), rand(3, 6), rand(3, 6));\n          }\n        \n          function resizeRendererToDisplaySize(renderer) {\n            const canvas = renderer.domElement;\n            const width = canvas.clientWidth;\n            const height = canvas.clientHeight;\n            const needResize = canvas.width !== width || canvas.height !== height;\n            if (needResize) {\n              renderer.setSize(width, height, false);\n            }\n            return needResize;\n          }\n        \n          class PickHelper {\n            constructor() {\n              this.raycaster = new THREE.Raycaster();\n              this.pickedObject = null;\n              this.pickedObjectSavedColor = 0;\n            }\n            pick(normalizedPosition, scene, camera, time) {\n              // restore the color if there is a picked object\n              if (this.pickedObject) {\n                this.pickedObject.material.emissive.setHex(this.pickedObjectSavedColor);\n                this.pickedObject = undefined;\n              }\n        \n              // cast a ray through the frustum\n              this.raycaster.setFromCamera(normalizedPosition, camera);\n              // get the list of objects the ray intersected\n              const intersectedObjects = this.raycaster.intersectObjects(scene.children);\n              if (intersectedObjects.length) {\n                // pick the first object. It's the closest one\n                this.pickedObject = intersectedObjects[0].object;\n                // save its color\n                this.pickedObjectSavedColor = this.pickedObject.material.emissive.getHex();\n                // set its emissive color to flashing red/yellow\n                this.pickedObject.material.emissive.setHex((time * 8) % 2 > 1 ? 0xFFFF00 : 0xFF0000);\n              }\n            }\n          }\n        \n          const pickPosition = {x: 0, y: 0};\n          const pickHelper = new PickHelper();\n          clearPickPosition();\n        \n          function render(time) {\n            time *= 0.001;  // convert to seconds;\n        \n            if (resizeRendererToDisplaySize(renderer)) {\n              const canvas = renderer.domElement;\n              camera.aspect = canvas.clientWidth / canvas.clientHeight;\n              camera.updateProjectionMatrix();\n            }\n        \n            cameraPole.rotation.y = time * .1;\n        \n            pickHelper.pick(pickPosition, scene, camera, time);\n        \n            renderer.render(scene, camera);\n        \n            requestAnimationFrame(render);\n          }\n          requestAnimationFrame(render);\n        \n          function getCanvasRelativePosition(event) {\n            const rect = canvas.getBoundingClientRect();\n            return {\n              x: (event.clientX - rect.left) * canvas.width  / rect.width,\n              y: (event.clientY - rect.top ) * canvas.height / rect.height,\n            };\n          }\n        \n          function setPickPosition(event) {\n            const pos = getCanvasRelativePosition(event);\n            pickPosition.x = (pos.x / canvas.width ) *  2 - 1;\n            pickPosition.y = (pos.y / canvas.height) * -2 + 1;  // note we flip Y\n          }\n        \n          function clearPickPosition() {\n            // unlike the mouse which always has a position\n            // if the user stops touching the screen we want\n            // to stop picking. For now we just pick a value\n            // unlikely to pick something\n            pickPosition.x = -100000;\n            pickPosition.y = -100000;\n          }\n          window.addEventListener('mousemove', setPickPosition);\n          window.addEventListener('mouseout', clearPickPosition);\n          window.addEventListener('mouseleave', clearPickPosition);\n        \n          window.addEventListener('touchstart', (event) => {\n            // prevent the window from scrolling\n            event.preventDefault();\n            setPickPosition(event.touches[0]);\n          }, {passive: false});\n        \n          window.addEventListener('touchmove', (event) => {\n            setPickPosition(event.touches[0]);\n          });\n        \n          window.addEventListener('touchend', clearPickPosition);\n        }\n        \n        main();\n","output":"str","x":510,"y":540,"wires":[["f797122b.223"]]},{"id":"b358747a.ea0598","type":"ui_slider","z":"f6f2187d.f17ca8","name":"","label":"slider","tooltip":"","group":"fa8a106f.0e84d8","order":9,"width":0,"height":0,"passthru":true,"outs":"end","topic":"topic","topicType":"msg","min":"0","max":"100","step":1,"x":250,"y":300,"wires":[["2acb6d30.7539e2"]]},{"id":"d3a9d319.9dd858","type":"function","z":"f6f2187d.f17ca8","name":"threenode","func":"return msg;   \n\n","outputs":1,"noerr":0,"initialize":"/*THREE = global.get('three')\n\nfunction main() {\n    \n    //canvasDom = document.createElement('canvas');\n    //canvasDom.setAttribute(\"id\", \"c\");\n    //body.appendChild(canvasDom);\n  const canvas = document.querySelector('#c');\n  const renderer = new THREE.WebGLRenderer({body});\n\n  const fov = 75;\n  const aspect = 2;  // the canvas default\n  const near = 0.1;\n  const far = 5;\n  const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  camera.position.z = 2;\n\n  const scene = new THREE.Scene();\n\n  {\n    const color = 0xFFFFFF;\n    const intensity = 1;\n    const light = new THREE.DirectionalLight(color, intensity);\n    light.position.set(-1, 2, 4);\n    scene.add(light);\n  }\n\n  const boxWidth = 1;\n  const boxHeight = 1;\n  const boxDepth = 1;\n  const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\n\n  const material = new THREE.MeshPhongMaterial({color: 0x44aa88});  // greenish blue\n\n  const cube = new THREE.Mesh(geometry, material);\n  scene.add(cube);\n\n  function render(time) {\n    time *= 0.001;  // convert time to seconds\n\n    cube.rotation.x = time;\n    cube.rotation.y = time;\n\n    renderer.render(scene, camera);\n\n    requestAnimationFrame(render);\n  }\n  requestAnimationFrame(render);\n\n}\n\nmain()*/\n\n\n","finalize":"","libs":[],"x":300,"y":680,"wires":[[]]},{"id":"f797122b.223","type":"template","z":"f6f2187d.f17ca8","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n\n<html>\n\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t    <script src=\"https://threejs.org/build/three.js\" ></script>\n\t\t<title>My first three.js app</title>\n\t\t<style>\n\t\t\tbody { margin: 0; }\n\t\t\t#c {height: 1000px ; width: 1000px;}\n\t\t</style>\n\t</head>\n\t<body>\n\t    <canvas id=\"c\"></canvas>\n\t\t<script>{{{payload.script}}}</script>\n\t</body>\n</html>\n","output":"str","x":660,"y":540,"wires":[["7cb9e020.8fa27"]]},{"id":"ca0656a1.81bfc","type":"ui_template","z":"f6f2187d.f17ca8","group":"fa8a106f.0e84d8","name":"IncludeLib","order":11,"width":0,"height":0,"format":"<script type=\"module\" src=\"https://threejs.org/build/three.js\"></script>","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"global","x":90,"y":300,"wires":[["b358747a.ea0598"]]},{"id":"2acb6d30.7539e2","type":"ui_template","z":"f6f2187d.f17ca8","group":"fa8a106f.0e84d8","name":"ThreeRndCubes","order":1,"width":10,"height":7,"format":"<!DOCTYPE html>\n<html>\n    <head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>My first three.js app</title>\n\t</head>\n\t<body>\n\t    <canvas id=\"c\"></canvas>\n        <script type=\"module\">\n    \t\tfunction main(number) {\n              //var number = parseInt(number,10)\n              const canvas = document.querySelector('#c');\n              const renderer = new THREE.WebGLRenderer({canvas});\n            \n              const fov = 60;\n              const aspect = 2;  // the canvas default\n              const near = 0.1;\n              const far = 200;\n              const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n              camera.position.z = 30;\n            \n              const scene = new THREE.Scene();\n              scene.background = new THREE.Color('white');\n            \n              // put the camera on a pole (parent it to an object)\n              // so we can spin the pole to move the camera around the scene\n              const cameraPole = new THREE.Object3D();\n              scene.add(cameraPole);\n              cameraPole.add(camera);\n            \n              {\n                const color = 0xFFFFFF;\n                const intensity = 1;\n                const light = new THREE.DirectionalLight(color, intensity);\n                light.position.set(-1, 2, 4);\n                camera.add(light);\n              }\n            \n              const boxWidth = 1;\n              const boxHeight = 1;\n              const boxDepth = 1;\n              const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\n            \n              function rand(min, max) {\n                if (max === undefined) {\n                  max = min;\n                  min = 0;\n                }\n                return min + (max - min) * Math.random();\n              }\n            \n              function randomColor() {\n                return `hsl(${rand(360) | 0}, ${rand(50, 100) | 0}%, 50%)`;\n              }\n            \n              var numObjects = number;\n              for (let i = 0; i < numObjects; ++i) {\n                const material = new THREE.MeshPhongMaterial({\n                  color: randomColor(),\n                });\n            \n                const cube = new THREE.Mesh(geometry, material);\n                scene.add(cube);\n            \n                cube.position.set(rand(-20, 20), rand(-20, 20), rand(-20, 20));\n                cube.rotation.set(rand(Math.PI), rand(Math.PI), 0);\n                cube.scale.set(rand(3, 6), rand(3, 6), rand(3, 6));\n              }\n            \n              function resizeRendererToDisplaySize(renderer) {\n                const canvas = renderer.domElement;\n                const width = canvas.clientWidth;\n                const height = canvas.clientHeight;\n                const needResize = canvas.width !== width || canvas.height !== height;\n                if (needResize) {\n                  renderer.setSize(width, height, false);\n                }\n                return needResize;\n              }\n            \n              class PickHelper {\n                constructor() {\n                  this.raycaster = new THREE.Raycaster();\n                  this.pickedObject = null;\n                  this.pickedObjectSavedColor = 0;\n                }\n                pick(normalizedPosition, scene, camera, time) {\n                  // restore the color if there is a picked object\n                  if (this.pickedObject) {\n                    this.pickedObject.material.emissive.setHex(this.pickedObjectSavedColor);\n                    this.pickedObject = undefined;\n                  }\n            \n                  // cast a ray through the frustum\n                  this.raycaster.setFromCamera(normalizedPosition, camera);\n                  // get the list of objects the ray intersected\n                  const intersectedObjects = this.raycaster.intersectObjects(scene.children);\n                  if (intersectedObjects.length) {\n                    // pick the first object. It's the closest one\n                    this.pickedObject = intersectedObjects[0].object;\n                    // save its color\n                    this.pickedObjectSavedColor = this.pickedObject.material.emissive.getHex();\n                    // set its emissive color to flashing red/yellow\n                    this.pickedObject.material.emissive.setHex((time * 8) % 2 > 1 ? 0xFFFF00 : 0xFF0000);\n                  }\n                }\n              }\n            \n              const pickPosition = {x: 0, y: 0};\n              const pickHelper = new PickHelper();\n              clearPickPosition();\n            \n              function render(time) {\n                time *= 0.001;  // convert to seconds;\n            \n                if (resizeRendererToDisplaySize(renderer)) {\n                  const canvas = renderer.domElement;\n                  camera.aspect = canvas.clientWidth / canvas.clientHeight;\n                  camera.updateProjectionMatrix();\n                }\n            \n                cameraPole.rotation.y = time * .1;\n            \n                pickHelper.pick(pickPosition, scene, camera, time);\n            \n                renderer.render(scene, camera);\n            \n                requestAnimationFrame(render);\n              }\n              requestAnimationFrame(render);\n            \n              function getCanvasRelativePosition(event) {\n                const rect = canvas.getBoundingClientRect();\n                return {\n                  x: (event.clientX - rect.left) * canvas.width  / rect.width,\n                  y: (event.clientY - rect.top ) * canvas.height / rect.height,\n                };\n              }\n            \n              function setPickPosition(event) {\n                const pos = getCanvasRelativePosition(event);\n                pickPosition.x = (pos.x / canvas.width ) *  2 - 1;\n                pickPosition.y = (pos.y / canvas.height) * -2 + 1;  // note we flip Y\n              }\n            \n              function clearPickPosition() {\n                // unlike the mouse which always has a position\n                // if the user stops touching the screen we want\n                // to stop picking. For now we just pick a value\n                // unlikely to pick something\n                pickPosition.x = -100000;\n                pickPosition.y = -100000;\n              }\n              window.addEventListener('mousemove', setPickPosition);\n              window.addEventListener('mouseout', clearPickPosition);\n              window.addEventListener('mouseleave', clearPickPosition);\n            \n              window.addEventListener('touchstart', (event) => {\n                // prevent the window from scrolling\n                event.preventDefault();\n                setPickPosition(event.touches[0]);\n              }, {passive: false});\n            \n              window.addEventListener('touchmove', (event) => {\n                setPickPosition(event.touches[0]);\n              });\n            \n              window.addEventListener('touchend', clearPickPosition);\n            }\n        \n            (function(scope) {\n                console.log('Position 1');\n                console.dir(scope);\n                console.log(scope.msg);\n                scope.$watch('msg.payload', function(data) {\n                    console.log('Position 2');\n                    console.dir(data);\n                    main(data);\n                });\n            })(scope);\n        \n\t\t</script>\n\t</body>\n</html>\n","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"local","x":420,"y":300,"wires":[[]]},{"id":"90abe500.371b98","type":"ui_button","z":"f6f2187d.f17ca8","name":"","group":"fa8a106f.0e84d8","order":2,"width":4,"height":1,"passthru":false,"label":"motor","tooltip":"","color":"","bgcolor":"","icon":"","payload":"","payloadType":"str","topic":"topic","topicType":"msg","x":250,"y":240,"wires":[["2acb6d30.7539e2"]]},{"id":"bf7da408.ce7a88","type":"ui_template","z":"f6f2187d.f17ca8","group":"fa8a106f.0e84d8","name":"CSS","order":10,"width":0,"height":0,"format":"\t\t<style>\n\t\t\tbody { \n\t\t\t    margin: 0;\n\t\t\t}\n\t\t\t#c {\n\n\t\t\t}\n\t\t\t.nr-dashboard-button .md-button {\n\t\t\t    width:100%;\n            }\n\t\t</style>","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"global","x":70,"y":340,"wires":[["b358747a.ea0598"]]},{"id":"5e6e6175.63e8e","type":"ui_button","z":"f6f2187d.f17ca8","name":"","group":"fa8a106f.0e84d8","order":3,"width":4,"height":1,"passthru":false,"label":"button","tooltip":"","color":"","bgcolor":"","icon":"","payload":"","payloadType":"str","topic":"topic","topicType":"msg","x":250,"y":200,"wires":[["2acb6d30.7539e2"]]},{"id":"9196d4e.be00f28","type":"ui_button","z":"f6f2187d.f17ca8","name":"","group":"fa8a106f.0e84d8","order":4,"width":4,"height":1,"passthru":false,"label":"button","tooltip":"","color":"","bgcolor":"","icon":"","payload":"","payloadType":"str","topic":"topic","topicType":"msg","x":250,"y":160,"wires":[["2acb6d30.7539e2"]]},{"id":"7e31dc16.4d7a8c","type":"ui_button","z":"f6f2187d.f17ca8","name":"","group":"fa8a106f.0e84d8","order":5,"width":4,"height":1,"passthru":false,"label":"button","tooltip":"","color":"","bgcolor":"","icon":"","payload":"","payloadType":"str","topic":"topic","topicType":"msg","x":250,"y":120,"wires":[["2acb6d30.7539e2"]]},{"id":"b8db46f1.f41f7","type":"ui_button","z":"f6f2187d.f17ca8","name":"","group":"fa8a106f.0e84d8","order":6,"width":4,"height":1,"passthru":false,"label":"motor","tooltip":"","color":"","bgcolor":"","icon":"","payload":"","payloadType":"str","topic":"topic","topicType":"msg","x":250,"y":80,"wires":[["2acb6d30.7539e2"]]},{"id":"fa8a106f.0e84d8","type":"ui_group","name":"3D","tab":"41f26cbf.7dcfc4","order":1,"disp":true,"width":14,"collapse":false},{"id":"41f26cbf.7dcfc4","type":"ui_tab","name":"THREEJS","icon":"dashboard","disabled":false,"hidden":false}]